nsims4 = 1000;
x4 = rep(0, nsims4);
mu = 0.5;
alpha = 0.05;
for(i in 1:nsims4){
tvec = rnorm(25, mu,1);
x4[i] = t.test(tvec)$p.value;
}
pow = rep(0,nsims4);
pow[x4<=alpha]=1;
sum(pow)/nsims4
nsims4 = 1000;
x4 = rep(0, nsims4);
mu = 0.5;
alpha = 0.05;
for(i in 1:nsims4){
tvec = rnorm(25, mu,1);
x4[i] = t.test(tvec)$p.value;
}
pow = rep(0,nsims4);
pow[x4<=alpha]=1;
sum(pow)/nsims4
nsims4 = 1000;
x4 = rep(0, nsims4);
mu = 0.5;
alpha = 0.05;
for(i in 1:nsims4){
tvec = rnorm(25, mu,1);
x4[i] = t.test(tvec)$p.value;
}
pow = rep(0,nsims4);
pow[x4<=alpha]=1;
sum(pow)/nsims4
nsims4 = 1000;
x4 = rep(0, nsims4);
mu = 0.5;
alpha = 0.05;
for(i in 1:nsims4){
tvec = rnorm(25, mu,1);
x4[i] = t.test(tvec)$p.value;
}
pow = rep(0,nsims4);
pow[x4<=alpha]=1;
sum(pow)/nsims4
nsims4 = 1000;
x4 = rep(0, nsims4);
mu = 0.5;
alpha = 0.05;
for(i in 1:nsims4){
tvec = rnorm(25, mu,1);
x4[i] = t.test(tvec)$p.value;
}
pow = rep(0,nsims4);
pow[x4<=alpha]=1;
sum(pow)/nsims4
nsims4 = 10;
x4 = rep(0, nsims4);
mu = 0.5;
alpha = 0.05;
for(i in 1:nsims4){
tvec = rnorm(25, mu,1);
x4[i] = t.test(tvec)$p.value;
}
pow = rep(0,nsims4);
pow[x4<=alpha]=1;
sum(pow)/nsims4
nsims4 = 10;
x4 = rep(0, nsims4);
mu = 0.5;
alpha = 0.05;
for(i in 1:nsims4){
tvec = rnorm(25, mu,1);
x4[i] = t.test(tvec)$p.value;
}
pow = rep(0,nsims4);
pow[x4<=alpha]=1;
sum(pow)/nsims4
nsims4 = 10;
x4 = rep(0, nsims4);
mu = 0.5;
alpha = 0.05;
for(i in 1:nsims4){
tvec = rnorm(25, mu,1);
x4[i] = t.test(tvec)$p.value;
}
pow = rep(0,nsims4);
pow[x4<=alpha]=1;
sum(pow)/nsims4
nsims4 = 10;
x4 = rep(0, nsims4);
mu = 0.5;
alpha = 0.05;
for(i in 1:nsims4){
tvec = rnorm(25, mu,1);
x4[i] = t.test(tvec)$p.value;
}
pow = rep(0,nsims4);
pow[x4<=alpha]=1;
sum(pow)/nsims4
nsims4 = 10;
x4 = rep(0, nsims4);
mu = 0.5;
alpha = 0.05;
for(i in 1:nsims4){
tvec = rnorm(25, mu,1);
x4[i] = t.test(tvec)$p.value;
}
pow = rep(0,nsims4);
pow[x4<=alpha]=1;
sum(pow)/nsims4
nsims4 = 10;
x4 = rep(0, nsims4);
mu = 0.5;
alpha = 0.05;
for(i in 1:nsims4){
tvec = rnorm(25, mu,1);
x4[i] = t.test(tvec)$p.value;
}
pow = rep(0,nsims4);
pow[x4<=alpha]=1;
sum(pow)/nsims4
nsims4 = 10;
x4 = rep(0, nsims4);
mu = 0.5;
alpha = 0.05;
for(i in 1:nsims4){
tvec = rnorm(25, mu,1);
x4[i] = t.test(tvec)$p.value;
}
pow = rep(0,nsims4);
pow[x4<=alpha]=1;
sum(pow)/nsims4
nsims4 = 10;
x4 = rep(0, nsims4);
mu = 0.5;
alpha = 0.05;
for(i in 1:nsims4){
tvec = rnorm(25, mu,1);
x4[i] = t.test(tvec)$p.value;
}
pow = rep(0,nsims4);
pow[x4<=alpha]=1;
sum(pow)/nsims4
nsims4 = 10;
x4 = rep(0, nsims4);
mu = 0.5;
alpha = 0.05;
for(i in 1:nsims4){
tvec = rnorm(25, mu,1);
x4[i] = t.test(tvec)$p.value;
}
pow = rep(0,nsims4);
pow[x4<=alpha]=1;
sum(pow)/nsims4
nsims4 = 10;
x4 = rep(0, nsims4);
mu = 0.5;
alpha = 0.05;
for(i in 1:nsims4){
tvec = rnorm(25, mu,1);
x4[i] = t.test(tvec)$p.value;
}
pow = rep(0,nsims4);
pow[x4<=alpha]=1;
sum(pow)/nsims4
nsims4 = 10;
x4 = rep(0, nsims4);
mu = 0.5;
alpha = 0.05;
for(i in 1:nsims4){
tvec = rnorm(25, mu,1);
x4[i] = t.test(tvec)$p.value;
}
pow = rep(0,nsims4);
pow[x4<=alpha]=1;
sum(pow)/nsims4
nsims4 = 10000;
x4 = rep(0, nsims4);
mu = 0.5;
alpha = 0.05;
for(i in 1:nsims4){
tvec = rnorm(25, mu,1);
x4[i] = t.test(tvec)$p.value;
}
pow = rep(0,nsims4);
pow[x4<=alpha]=1;
sum(pow)/nsims4
x5 = seq(0,100,0.05)
length(x5)
x5 = seq(0,100,0.05)
pvec = dnorm(x5,mean=50,sd=sqrt(10))
lines(pvec)
x5 = seq(0,100,0.05)
pvec = dnorm(x5,mean=50,sd=sqrt(10))
plot(pvec)
x5 = seq(0,100,0.05)
pvec = dnorm(x5,mean=50,sd=sqrt(10))
plot(x5,pvec)
x5 = seq(0,100,0.05)
pvec = dnorm(x5,mean=50,sd=sqrt(10))
lines(x5,pvec)
rm(list=ls())
x5 = seq(0,100,0.05)
pvec = dnorm(x5,mean=50,sd=sqrt(10))
lines(x5,pvec)
x5 = seq(0,100,0.05)
pvec = dnorm(x5,mean=50,sd=sqrt(10))
plot(x4,pvec,type="n")
lines(x5,pvec)
x5 = seq(0,100,0.05)
pvec = dnorm(x5,mean=50,sd=sqrt(10))
plot(x4,pvec,type="n")
lines(x5,pvec)
plot.new()
x5 = seq(0,100,0.05)
pvec = dnorm(x5,mean=50,sd=sqrt(10))
plot(x4,pvec,type="n")
lines(x5,pvec)
x5 = seq(0,100,0.05)
pvec = dnorm(x5,mean=50,sd=sqrt(10))
plot(x4,pvec,type="n")
lines(x5,pvec)
x5 = seq(0,100,0.05)
pvec = dnorm(x5,mean=50,sd=sqrt(10))
plot(x4,pvec,type="n")
lines(x5,pvec,type="l")
plot.new()
x5 = seq(0,100,0.05)
pvec = dnorm(x5,mean=50,sd=sqrt(10))
plot(x4,pvec,type="n")
lines(x5,pvec,type="l")
x5 = seq(0,100,0.05)
pvec = dnorm(x5,mean=50,sd=sqrt(10))
plot(x4,pvec,type="n")
lines(x5,pvec,type="h")
x5 = seq(0,100,0.05)
pvec = dnorm(x5,mean=50,sd=sqrt(10))
lines(x5,pvec,type="h")
x5 = seq(0,100,1)
pvec = dnorm(x5,mean=50,sd=sqrt(10))
lines(x5,pvec,type="h")
x5 = seq(0,100,1)
pvec = dnorm(x5,mean=50,sd=sqrt(10))
lines(x5,pvec)
plot.new()
x5 = seq(0,100,1)
pvec = dnorm(x5,mean=50,sd=sqrt(10))
lines(x5,pvec)
x5 = seq(0,100,1)
pvec = dnorm(x5,mean=50,sd=sqrt(10))
plot(x5,pvec)
x5 = seq(0,100,1)
pvec = dnorm(x5,mean=50,sd=sqrt(10))
plot(x5,pvec,type="l")
x5 = seq(0,100,1)
pvec = dnorm(x5,mean=50,sd=sqrt(10))
lines(x5,pvec,type="l")
x5 = seq(0,100,1)
pvec = dnorm(x5,mean=50,sd=sqrt(10))
lines(x5,pvec,type="l")
x5 = seq(0,100,1)
pvec = dnorm(x5,mean=50,sd=sqrt(10))
lines(x5,pvec,type="l")
plot.new()
x5 = seq(0,100,1)
pvec = dnorm(x5,mean=50,sd=sqrt(10))
lines(x5,pvec,type="l")
x5 = seq(0,100,1)
pvec = dnorm(x5,mean=50,sd=sqrt(10))
lines(pvec,type="l")
plot(cars)
lines(stats::lowess(car))
lines(stats::lowess(cars))
plot(cars,type="n"0
plot(cars,type="n")
plot(x5,pvec,type="n")
lines(x5,pvec)
x5 = seq(0,100,1)
pvec = dnorm(x5,mean=50,sd=sqrt(10))
plot(x5,pvec,type="n")
lines(pvec)
x5 = seq(0,100,1)
pvec = dnorm(x5,mean=50,sd=sqrt(10))
plot(x5,pvec,type="n")
lines(pvec)
x5 = seq(0,100,1)
pvec = dnorm(x5,mean=50,sd=sqrt(10))
plot(x5,pvec,type="n")
lines(pvec)
x5 = seq(0,100,1)
pvec = dnorm(x5,mean=50,sd=sqrt(10))
plot(x5,pvec,type="n",xlab="value",
ylab="probability density",
main="pdf of normal dist. with
u = 50, var = 10")
lines(pvec)
plot(dbinom(seq(0,10),10,0.5))
plot(seq(0,10),dbinom(seq(0,10),10,0.5))
plot(seq(0,10),pbinom(seq(0,10),10,0.5))
sign_analysis=function(x){
xt = x[x != 0]
nt = length(xt)
ind = rep(0,nt)
ind[xt > 0] = 1
splus = sum(ind)
return(1-dbinom(splus-1,nt,0.5))
}
school=c(82,69,73,43,58,56,76,65)
home=c(63,42,74,37,51,43,80,62)
diff = school-home
sign_analysis(diff)
1-0.78125
sign_analysis=function(x){
xt = x[x != 0]
nt = length(xt)
ind = rep(0,nt)
ind[xt > 0] = 1
splus = sum(ind)
return(1-dbinom(splus,nt,0.5))
}
school=c(82,69,73,43,58,56,76,65)
home=c(63,42,74,37,51,43,80,62)
diff = school-home
sign_analysis(diff)
1-0.890625
sign_analysis=function(x){
xt = x[x != 0]
nt = length(xt)
ind = rep(0,nt)
ind[xt > 0] = 1
splus = sum(ind)
return(1-pbinom(splus-1,nt,0.5))
}
school=c(82,69,73,43,58,56,76,65)
home=c(63,42,74,37,51,43,80,62)
diff = school-home
sign_analysis(diff)
sign_analysis=function(x){
xt = x[x != 0]
nt = length(xt)
ind = rep(0,nt)
ind[xt > 0] = 1
splus = sum(ind)
return(1-pbinom(splus,nt,0.5))
}
school=c(82,69,73,43,58,56,76,65)
home=c(63,42,74,37,51,43,80,62)
diff = school-home
sign_analysis(diff)
sign_analysis=function(x){
xt = x[x != 0]
nt = length(xt)
ind = rep(0,nt)
ind[xt > 0] = 1
splus = sum(ind)
return(1-pbinom(splus-1,nt,0.5))
}
school=c(82,69,73,43,58,56,76,65)
home=c(63,42,74,37,51,43,80,62)
diff = school-home
sign_analysis(diff)
factorial(3)
6*3
6^2
max_prob = function(n) factorial(n) * (1/n)^n
max_prob(3)
max_prob = function(n) factorial(n) * (1/n)^n
# n = 3
max_prob(3)
# n = 5
max_prob(5)
# n = 10
max_prob(10)
# n = 12
max_prob(12)
# n = 15
max_prob(15)
# n = 20
max_prob(20)
draw.bootstrap.sample = function() {
n = dim(law)[1]
ind = sample(n,replace = TRUE)
return(cor(law[ind,]$LSAT,law[ind,]$GPA))
}
B = 40000
thetastar = replicate(B,draw.bootstrap.sample())
hist(thetastar, breaks=1000)
data(law)
draw.bootstrap.sample = function() {
n = dim(law)[1]
ind = sample(n,replace = TRUE)
return(cor(law[ind,]$LSAT,law[ind,]$GPA))
}
B = 40000
thetastar = replicate(B,draw.bootstrap.sample())
hist(thetastar, breaks=1000)
data(law)
setwd("~/Documents/Development")
library(RcppCNPy)
library(bootstrap)
library(weights)
data(lawO0
)
data(law)
data(law)
draw.bootstrap.sample = function() {
n = dim(law)[1]
ind = sample(n,replace = TRUE)
return(cor(law[ind,]$LSAT,law[ind,]$GPA))
}
B = 40000
thetastar = replicate(B,draw.bootstrap.sample())
hist(thetastar, breaks=1000)
law
law[-1]
law[-1,:]
law[-1,]
law
s_law = law[-11,]
s_law = law[-1,]
print(s_law)
draw.bootstrap.sample = function() {
n = dim(law)[1]
ind = sample(n,replace = TRUE)
return(cor(law[ind,]$LSAT,law[ind,]$GPA))
}
B = 40000
thetastar = replicate(B,draw.bootstrap.sample())
hist(thetastar, breaks=1000)
s_law = law[-11,]
s_law = s_law[-1,]
print(s_law)
draw.bootstrap.sample = function() {
n = dim(law)[1]
ind = sample(n,replace = TRUE)
return(cor(law[ind,]$LSAT,law[ind,]$GPA))
}
B = 40000
thetastar = replicate(B,draw.bootstrap.sample())
hist(thetastar, breaks=1000)
x = c(1,0,1)
sample(x,replace=T)
sample(x,replace=T)
sample(x,replace=T)
sample(x,replace=T)
sample(x,replace=T)
sum(sample(x,replace=T))
sum(sample(x,replace=T))
sum(sample(x,replace=T))
sum(sample(x,replace=T))
tot = 500
pop1 = c(rep(1,269) + rep(0, tot -269))
nrep = 1000
boots = rep(0,nrep)
for (i in 1:nrep){
s = sum(sample(pop1, replace=T))/tot
boots[i] = s
}
hist(boots, breaks=100)
abline(v=269/tot, col="red", lwd=4)
tot = 500
pop1 = c(rep(1,269) + rep(0, tot -269))
nrep = 1000
boots = rep(0,nrep)
for (i in 1:nrep){
s = sum(sample(pop1, replace=T))/tot
boots[i] = s
}
hist(boots, breaks=100)
abline(v=269/tot, col="red", lwd=4)
boots
pop1
tot = 500
pop1 = c(rep(1,269), rep(0, tot -269))
nrep = 1000
boots = rep(0,nrep)
for (i in 1:nrep){
s = sum(sample(pop1, replace=T))/tot
boots[i] = s
}
hist(boots, breaks=100)
abline(v=269/tot, col="red", lwd=4)
tot = 500
pop1 = c(rep(1,269), rep(0, tot -269))
nrep = 10000
boots = rep(0,nrep)
# code modified from lecture slides
for (i in 1:nrep){
s = sum(sample(pop1, replace=T))/tot
boots[i] = s
}
hist(boots, breaks=100)
abline(v=269/tot, col="red", lwd=4)
conf_low = sort(boots)[nrep*.05]
conf_upp = sort(boots)[nrep*.95]
abline(v=c(confidence.lower,confidence.upper),col = "blue",lwd = 4)
tot = 500
pop1 = c(rep(1,269), rep(0, tot -269))
nrep = 10000
boots = rep(0,nrep)
# code modified from lecture slides
for (i in 1:nrep){
s = sum(sample(pop1, replace=T))/tot
boots[i] = s
}
hist(boots, breaks=100)
abline(v=269/tot, col="red", lwd=4)
conf_low = sort(boots)[nrep*.05]
conf_upp = sort(boots)[nrep*.95]
abline(v=c(conf_low,conf_upp),col = "blue",lwd = 4)
c(conf_low, conf_upp)
269/500
